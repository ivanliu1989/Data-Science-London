coef(f, cv$lambda.min)
coef(f, cv$lambda.1se)
predict(f, s=cv$lambda.1se, type="nonzero")
plot(cv)
title(sprintf("alpha=%.2f", alpha))
y.pred <- predict(f, s=cv$lambda.1se, newx=as.matrix(x), type="response")
y.pred
y.pred <- round( y.pred[,1])
y.pred
mean((y.pred-y)^2)
y.pred <- predict(f, s=cv$lambda.1se, newx=as.matrix(x.test), type="response")
y.pred <- round( y.pred[,1])
write.table(cbind(1:length(y.pred),y.pred), col.names=c("Id","Solution"), file="ypred_glmnet_10_1se.csv", row.names=F, sep=",")
png('Img/sprintf.png')
plot(cv)
title(sprintf("alpha=%.2f", alpha))
dev.off()
png('sprintf.png')
plot(cv)
title(sprintf("alpha=%.2f", alpha))
dev.off()
png('deviance.png')
plot(f, xvar="dev")   # Show graph of deviance
dev.off()
setwd("/Users/ivan/Work_directory/Data-Science-London")
library(caret)
###### load data #########################################
x <- read.csv("Data/train.csv", header = F)
test <- read.csv("Data/test.csv", header = F)
y <- read.csv("Data/trainLabels.csv", header= F)
names(y)<- 'result'
x <- cbind(x,y)
str(x)
x$result <- as.factor(x$result)
index <- createDataPartition(x$result, p = 0.8,list = F)
x_train <- x[index,]
x_test <- x[-index,]
setwd("/Users/ivan/Work_directory/Data-Science-London")
library(caret)
x <- read.csv("Data/train.csv", header = F)
test <- read.csv("Data/test.csv", header = F)
y <- read.csv("Data/trainLabels.csv", header= F)
names(y)<- 'result'
x <- cbind(x,y)
str(x)
x$result <- as.factor(x$result)
str(x)
levels(x$result) <- c('Yes', 'No')
str(x)
x <- read.csv("Data/train.csv", header = F)
test <- read.csv("Data/test.csv", header = F)
y <- read.csv("Data/trainLabels.csv", header= F)
names(y)<- 'result'
x <- cbind(x,y)
x$result <- as.factor(x$result)
levels(x$result) <- c('NO', 'YES')
str(x)
head(x)
x <- read.csv("Data/train.csv", header = F)
test <- read.csv("Data/test.csv", header = F)
y <- read.csv("Data/trainLabels.csv", header= F)
names(y)<- 'result'
x <- cbind(x,y)
str(x)
head(x)
levels(x$result) <- c('NO', 'YES')
head(x)
x$result <- as.factor(x$result)
levels(x$result) <- c('NO', 'YES')
head(x)
mean(is.na(x))
featurePlot(x = x[, 1:4],
y = x$result,
plot = "box",
## Pass in options to bwplot()
scales = list(y = list(relation="free"),
x = list(rot = 90)),
layout = c(4,1 ),
auto.key = list(columns = 2))
featurePlot(x = x[, 1:40],
y = x$result,
plot = "box",
## Pass in options to bwplot()
scales = list(y = list(relation="free"),
x = list(rot = 90)),
layout = c(4,1 ),
auto.key = list(columns = 2))
featurePlot(x = x[, 1:40],
y = x$result,
plot = "box",
## Pass in options to bwplot()
scales = list(y = list(relation="free"),
x = list(rot = 90)),
layout = c(4,10),
auto.key = list(columns = 2))
png("featurePlot.png")
featurePlot(x = x[, 1:40],
y = x$result,
plot = "box",
## Pass in options to bwplot()
scales = list(y = list(relation="free"),
x = list(rot = 90)),
layout = c(4,10),
auto.key = list(columns = 2))
dev.off()
png("featurePlot.png",1024,1024)
featurePlot(x = x[, 1:40],
y = x$result,
plot = "box",
## Pass in options to bwplot()
scales = list(y = list(relation="free"),
x = list(rot = 90)),
layout = c(4,10),
auto.key = list(columns = 2))
dev.off()
str(x)
nzv <- nearZeroVar(x, saveMetrics = TRUE)
nzv
nzv[nzv$nzv, ][1:10, ]
nzv[nzv$nzv, ][1:10, ]
nzv$nzv
nzv
index <- createDataPartition(x$result, p = 0.8,list = F)
x_train <- x[index,]
x_test <- x[-index,]
head(x_train)
fitControl <- trainControl(method = "repeatedcv",
number = 10,repeats = 10, summaryFunction = twoClassSummary)
gbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9),
n.trees = (1:30)*50,
shrinkage = 0.1)
set.seed(825)
gbmFit <- train(result ~ ., data = x_train,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
tuneGrid = gbmGrid,
metric = "ROC")
set.seed(825)
gbmFit <- train(result ~ ., data = x_train,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
tuneGrid = gbmGrid,
metric = "Kappa")
require(pROC)
install.packages('pROC')
warnings()
require(pROC)
set.seed(825)
gbmFit <- train(result ~ ., data = x_train,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
tuneGrid = gbmGrid,
preProc = c('pca'),
metric = "Kappa")
gbmFit <- train(result ~ ., data = x_train,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
tuneGrid = gbmGrid,
metric = "ROC")
fitControl <- trainControl(method = "repeatedcv",
number = 10,repeats = 10, summaryFunction = twoClassSummary,
classProbs = TRUE)
gbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9),
n.trees = (1:30)*50,
shrinkage = 0.1)
##### Modeling #####
set.seed(825)
gbmFit <- train(result ~ ., data = x_train,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
tuneGrid = gbmGrid,
preProc = c('pca'),
metric = "ROC")
gbmFit
trellis.par.set(caretTheme())
plot(gbmFit, scales = list(x = list(log = 2)))
png('tune_plot.png')
plot(gbmFit, scales = list(x = list(log = 2)))
dev.off()
gbmImp <- varImp(gbmFit, scale = FALSE)
plot(gbmImp, top = 20)
plot(gbmImp, top = 40)
png('varImp.png')
plot(gbmImp, top = 40)
dev.off()
getTrainPerf(gbmFit)
pred_gbm <- predict(gbmFit, x_test)
confusionMatrix(pred_gbm, x_test$result)
head(prped_gbm)
head(pred_gbm)
gbmFit2 <- train(result ~ ., data = x_train,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
tuneGrid = gbmGrid,
preProc = c('pca'),
metric = "ROC")
trellis.par.set(caretTheme())
png('tune_plot.png')
plot(gbmFit, scales = list(x = list(log = 2)))
dev.off()
plot(gbmFit, scales = list(x = list(log = 2)))
gbmGrid <-  expand.grid(interaction.depth = c(9, 15, 20),
n.trees = (1:30)*50,
shrinkage = 0.1)
plot(gbmFit2, scales = list(x = list(log = 2)))
gbmImp <- varImp(gbmFit2, scale = FALSE)
plot(gbmImp2, top = 40)
plot(gbmImp, top = 40)
getTrainPerf(gbmFit)
getTrainPerf(gbmFit2)
pred_gbm <- predict(gbmFit2, x_test)
confusionMatrix(pred_gbm, x_test$result)
gbmGrid <-  expand.grid(interaction.depth = c(9, 15, 20),
n.trees = (1:30)*50,
shrinkage = 0.1)
gbmFit2 <- train(result ~ ., data = x_train,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
tuneGrid = gbmGrid,
preProc = c('pca'),
metric = "ROC")
gbmFit2
trellis.par.set(caretTheme())
plot(gbmFit2, scales = list(x = list(log = 2)))
png('tune_plot2.png')
plot(gbmFit2, scales = list(x = list(log = 2)))
dev.off()
gbmImp <- varImp(gbmFit2, scale = FALSE)
plot(gbmImp, top = 40)
getTrainPerf(gbmFit2)
getTrainPerf(gbmFit)
pred_gbm <- predict(gbmFit2, x_test)
confusionMatrix(pred_gbm, x_test$result)
gbmImp
plot(gbmImp, top = 40)
names(x)
gbmImp
pcaVar <- preProcess(x, method = 'pca')
names(x)
pcaVar <- preProcess(x[,1:40], method = 'pca')
pcaVar
plot(pca)
plot(pcaVar)
attr(pcaVar)
set.seed(1)
sigDist <- sigest(result~., data = x_train, frac = 1)
install.packages('kernlab')
require(kernlab)
sigDist <- sigest(result~., data = x_train, frac = 1)
sigDist
?sigest
svmGrid <- expand.grid(.sigma = sigDist, .C = 2^(-2:7))
svmGrid
sigDist
set.seed(2)
svmPCAFit <- train(result~.,
method = "svmRadial",
tuneGrid = svmrGrid,
preProcess = c("center","scale","pca"), # if center and scale needed
trControl = ctrl)
svmPCAFit <- train(result~., data=x_train,
method = "svmRadial",
tuneGrid = svmrGrid,
preProcess = c("center","scale","pca"), # if center and scale needed
trControl = ctrl)
ctrl <- trainControl(method = "repeatedcv", repeats = 10, savePred = T)
svmPCAFit <- train(result~., data=x_train,
method = "svmRadial",
tuneGrid = svmrGrid,
preProcess = c("center","scale","pca"), # if center and scale needed
trControl = ctrl)
svmGrid <- expand.grid(.sigma = sigDist, .C = 2^(-2:7))
svmPCAFit <- train(result~., data=x_train,
method = "svmRadial",
tuneGrid = svmGrid,
preProcess = c("center","scale","pca"), # if center and scale needed
trControl = ctrl)
svmPCAFit
pred_svm <- predict(svmPCAFit, x_test)
confusionMatrix(pred_svm, x_test$result)
confusionMatrix(pred_svm, x_test$result)
trellis.par.set(caretTheme())
plot(svmPCAFit, scales = list(x = list(log = 2)))
confusionMatrix(svmPCAFit, x_test$result)
confusionMatrix(pred_svm, x_test$result)
trellis.par.set(caretTheme())
trellis.par.set(caretTheme())
png('tune_plot_svmRadial.png')
plot(svmPCAFit, scales = list(x = list(log = 2)))
dev.off()
svmImp <- varImp(svmPCAFit, scale = FALSE)
plot(svmImp, top = 40)
png('varImp_svmRadial.png')
plot(svmImp, top = 40)
dev.off()
getTrainPerf(svmPCAFit)
confusionMatrix(pred_svm, x_test$result)
confusionMatrix(pred_gbm, x_test$result)
svmPCAFit <- train(result~., data=x,
method = "svmRadial",
tuneGrid = svmGrid,
preProcess = c("center","scale","pca"), # if center and scale needed
trControl = ctrl)
pred_svm <- predict(svmPCAFit, x_test)
confusionMatrix(pred_svm, x_test$result)
pred_svm <- predict(svmPCAFit, x)
confusionMatrix(pred_svm, x$result)
trellis.par.set(caretTheme())
plot(svmPCAFit, scales = list(x = list(log = 2)))
svmImp <- varImp(svmPCAFit, scale = FALSE)
plot(svmImp, top = 40)
getTrainPerf(svmPCAFit)
getTrainPerf(gbmFit2)
setwd("/Users/ivan/Work_directory/Data-Science-London")
library(caret)
library(gmm)
x <- read.csv("Data/train.csv", header = F)
test <- read.csv("Data/test.csv", header = F)
y <- read.csv("Data/trainLabels.csv", header= F)
names(y)<- 'result'
x <- cbind(x,y)
str(x)
index <- createDataPartition(x$result, p = 0.8,list = F)
x_train <- x[index,]
x_test <- x[-index,]
str(x_train)
str(x_test)
dim(x_test)
dim(x_train)
dim(x_train)
res <- gmm(x_train$result~x_train[,1:40], x_train)
res <- gmm(x_train[,1:40]~x_train$result, x_train)
g1 <-as.matrix(x_train[,1:40])
g2 <- as.matrix(x_train$result)
x <-as.matrix(x_train)
res <- gmm(x_train[,1:40]~x_train$result, x_train)
g1
res <- gmm(x_train[,1:40]~x_train$result, x=x_train)
res <- gmm(g1~g2, x)
rm(list=ls())
setwd("/Users/ivan/Work_directory/Data-Science-London")
library(caret)
library(gmm)
##### Pre process #####
x <- read.csv("Data/train.csv", header = F)
test <- read.csv("Data/test.csv", header = F)
y <- read.csv("Data/trainLabels.csv", header= F)
names(y)<- 'result'
x <- cbind(x,y)
str(x)
x$result <- as.factor(x$result)
index <- createDataPartition(x$result, p = 0.8,list = F)
x_train <- x[index,]
x_test <- x[-index,]
##### GMM #####
g1 <-as.matrix(x_train[,1:40])
g2 <- as.matrix(x_train$result)
x1 <- as.matrix(x_train)
res <- gmm(g1~g2, x1)
g1 <-as.matrix(x_train[,1:40])
g2 <- as.matrix(x_train$result)
x1 <- as.matrix(x_train)
res <- gmm(g1~g2, x1)
res <- gmm(g2~g1, x1)
dim(g1)
dim(g2)
dim(x1)
?pca
mean(is.na(x))
featurePlot(x)
Grid <- expand.grid(c=c(20,50,100))
fitControl <- trainControl(method="repeatedcv",10,5,classProbs = T)
?train
Grid <- expand.grid(c=c(20,50,100))
fitControl <- trainControl(method="repeatedcv",10,5,classProbs = T)
fit_svmLinear <- train(result~., method='svmLinear', data=x_train,
trControl = fitControl3, verbose=T, preProcess=c('pca'),
metric='ROC',tuneGrid=Grid)
fit_svmLinear <- train(result~., method='svmLinear', data=x_train,
trControl = fitControl, verbose=T, preProcess=c('pca'),
metric='ROC',tuneGrid=Grid)
Grid <- expand.grid(C=c(20,50,100))
fit_svmLinear <- train(result~., method='svmLinear', data=x_train,
trControl = fitControl, verbose=T, preProcess=c('pca'),
metric='ROC',tuneGrid=Grid)
fit_svmLinear
Grid <- expand.grid(C=c(0.01,1,10,100,1000),gamma=c(0.01,0.001,0.0001),range=10^c(-3:3))
fitControl <- trainControl(method="repeatedcv",10,5,classProbs = T)
fit_svmRadialCost <- train(result~., method='svmRadialCost', data=x_train,
trControl = fitControl, verbose=T, preProcess=c('pca'),
metric='ROC',tuneGrid=Grid)
Grid <- expand.grid(C=c(0.01,1,10,100,1000))
fitControl <- trainControl(method="repeatedcv",10,5,classProbs = T)
fit_svmRadialCost <- train(result~., method='svmRadialCost', data=x_train,
trControl = fitControl, verbose=T, preProcess=c('pca'),
metric='ROC',tuneGrid=Grid)
Grid <- expand.grid(C=c(0.01,1,10,100,1000))
fitControl <- trainControl(method="repeatedcv",10,5,classProbs = T)
fit_svmRadialCost <- train(result~., method='svmRadialCost', data=x_train,
trControl = fitControl, verbose=T, preProcess=c('pca'),
metric='ROC',tuneGrid=Grid)
fit_svmRadialCost
Pred <- predict(fit_svmRadialCost, x_train)
confusionMatrix(Pred, x_train$result)
Pred <- predict(fit_svmRadialCost, x_test)
confusionMatrix(Pred, x_test$result)
Grid <- expand.grid(C=c(0.01,0.1,1,2,10,100,1000))
fitControl <- trainControl(method="repeatedcv",10,10,classProbs = T)
fit_svmRadialCost <- train(result~., method='svmRadialCost', data=x_train,
trControl = fitControl, verbose=T, preProcess=c('pca'),
tuneGrid=Grid)
fit_svmRadialCost
Pred <- predict(fit_svmRadialCost, x_train)
confusionMatrix(Pred, x_train$result)
Pred <- predict(fit_svmRadialCost, x_test)
confusionMatrix(Pred, x_test$result)
head(x$result)
levels(x$result) <- ('Yes','No')
levels(x$result) <- c('Yes','No')
head(x$result)
levels(x$result) <- c('No','Yes')
head(x$result)
mean(is.na(x))
index <- createDataPartition(x$result, p = 0.8,list = F)
x_train <- x[index,]
x_test <- x[-index,]
Grid <- expand.grid(C=c(0.01,0.1,1,2,10,100,1000))
fitControl <- trainControl(method="repeatedcv",10,10,classProbs = T)
fit_svmRadialCost <- train(result~., method='svmRadialCost', data=x_train,
trControl = fitControl, verbose=T, preProcess=c('pca'),
tuneGrid=Grid)
Pred <- predict(fit_svmRadialCost, x_train)
confusionMatrix(Pred, x_train$result)
Pred <- predict(fit_svmRadialCost, x_test)
confusionMatrix(Pred, x_test$result)
Pred <- predict(fit_svmRadialCost, x_train)
confusionMatrix(Pred, x_train$result)
fit_svmRadialCost
Grid <- expand.grid(C=c(1:10,0.5))
fitControl <- trainControl(method="repeatedcv",10,10,classProbs = T)
fit_svmRadialCost <- train(result~., method='svmRadialCost', data=x_train,
trControl = fitControl, verbose=T, preProcess=c('pca'),
tuneGrid=Grid)
Pred <- predict(fit_svmRadialCost, x_train)
confusionMatrix(Pred, x_train$result)
Pred <- predict(fit_svmRadialCost, x_test)
confusionMatrix(Pred, x_test$result)
fit_svmRadialCost
varImp(fit_svmRadialCost)
Grid <- expand.grid(C=c(1:10,0.5))
fitControl <- trainControl(method="repeatedcv",10,10,classProbs = T)
fit_svmRadialCost <- train(result~V15+V13+V19+V35+V29+V40+V37+V33+V7+V24+V12+V5+V2+V21, method='svmRadialCost', data=x_train,
trControl = fitControl, verbose=T, preProcess=c('pca'),
tuneGrid=Grid)
Pred <- predict(fit_svmRadialCost, x_train)
confusionMatrix(Pred, x_train$result)
featureSelection <- varImp(fit_svmRadialCost)
plot(featureSelection)
varImp
featureSelection
Pred <- predict(fit_svmRadialCost, x_test)
confusionMatrix(Pred, x_test$result)
featureSelection
Grid <- expand.grid(C=c(1:10,0.5))
fitControl <- trainControl(method="repeatedcv",10,10,classProbs = T)
fit_svmRadialCost <- train(result~V15+V13+V19+V35+V29+V40+V37+V33+V7+V24+V12+V5+V2+V21,
method='svmRadialCost', data=x,
trControl = fitControl, verbose=T, preProcess=c('pca'),
tuneGrid=Grid)
Pred <- predict(fit_svmRadialCost, x_test)
confusionMatrix(Pred, x_test$result) ## acc 0.88 after 1st feature selection
Pred <- predict(fit_svmRadialCost, x_train)
confusionMatrix(Pred, x_train$result)
Pred_test <- predict(fit_svmRadialCost, test)
fit_svmRadialCost
Id <- c(1:length(Pred_test))
submission <- data.frame(Id, Pred_test)
names(submission)<-c("Id","Solution")
write.table(submission, 'submission_svm_24Sep2014.csv',sep=',',row.names = F)
head(submission)
head(submission)
levels(submission) <- c(1,0)
head(submission)
levels(submission[,2]) <- c(1,0)
head(submission)
levels(submission[,2]) <- c(0,1)
head(submission)
names(submission)<-c("Id","Solution")
write.table(submission, 'submission_svm_24Sep2014.csv',sep=',',row.names = F)
fit_svmRadialCost <- train(result~V15+V13+V19+V35+V29+V40+V37+V33+V7+V24+V12+V5+V2+V21,
method='svmRadialCost', data=x,
trControl = fitControl, verbose=T, preProcess=c('pca','center','scale'),
tuneGrid=Grid)
featureSelection <- varImp(fit_svmRadialCost)
plot(featureSelection)
Pred <- predict(fit_svmRadialCost, x_train)
confusionMatrix(Pred, x_train$result)
Pred <- predict(fit_svmRadialCost, x_test)
confusionMatrix(Pred, x_test$result)
Pred_test <- predict(fit_svmRadialCost, test)
Id <- c(1:length(Pred_test))
submission <- data.frame(Id, Pred_test)
levels(submission[,2]) <- c(0,1)
names(submission)<-c("Id","Solution")
write.table(submission, 'submission_svm_24Sep2014.csv',sep=',',row.names = F)
